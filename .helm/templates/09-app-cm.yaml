---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-config
data:
  App.toml: |
    id = {{ pluck .Values.werf.env .Values.app.id | first | default .Values.app.id._default | quote }}
    
    [rate_limit]
    message_count = {{ pluck .Values.werf.env (index .Values.app.message_count .Values.global.org .Values.global.app) | first | default (index .Values.app.message_count .Values.global.org .Values.global.app)._default }}
    byte_count = {{ pluck .Values.werf.env (index .Values.app.byte_count .Values.global.org .Values.global.app) | first | default (index .Values.app.byte_count .Values.global.org .Values.global.app)._default }}

    ##
    ## ULMS
    ##
    [authn.{{ pluck .Values.werf.env .Values.app.authn.ident | first | default .Values.app.authn.ident._default | quote }}]
    audience = [{{ pluck .Values.werf.env .Values.app.authn.audience | first | default .Values.app.authn.audience._default | quote }}]
    algorithm = {{ pluck .Values.werf.env .Values.app.authn.algorithm | first | default .Values.app.authn.algorithm._default | quote }}
    key = {{ printf "/app/%s" (pluck .Values.werf.env .Values.app.authn.key | first | default .Values.app.authn.key._default) }}
    
    [authz.{{ pluck .Values.werf.env .Values.app.authz.ident | first | default .Values.app.authz.ident._default | quote }}]
    type = {{ pluck .Values.werf.env .Values.app.authz.type | first | default .Values.app.authz.type._default | quote }}
    trusted = [
    {{- range $k, $v := (pluck .Values.werf.env .Values.app.authz.trusted | first | default .Values.app.authz.trusted._default) }}
    {{- if $k }}, {{ end }}
    {{- $v | quote -}}
    {{- end -}}
    ]

{{- range $tenant := .Values.app.tenants }}

{{- if hasPrefix "production" $.Values.werf.env }}
{{- if (pluck $.Values.werf.env $tenant.authn.ident | first) }}
    ##
    ## {{ $tenant.name }}
    ##
    [authn.{{ pluck $.Values.werf.env $tenant.authn.ident | first | default $tenant.authn.ident._default | quote }}]
    audience = [
    {{- range $k, $v := (pluck $.Values.werf.env $tenant.authn.audience | first | default $tenant.authn.audience._default) }}
    {{- if $k }}, {{ end }}
    {{- $v | quote -}}
    {{- end -}}
    ]
    algorithm = {{ pluck $.Values.werf.env $tenant.authn.algorithm | first | default $tenant.authn.algorithm._default | quote }}
    key = {{ printf "/app/%s" (pluck $.Values.werf.env $tenant.authn.key | first | default $tenant.authn.key._default) }}
{{- end }}
{{- else if hasPrefix "staging" $.Values.werf.env }}
{{- if (pluck $.Values.werf.env $tenant.authn.ident | first) }}
    ##
    ## {{ $tenant.name }}
    ##
    [authn.{{ pluck $.Values.werf.env $tenant.authn.ident | first | default $tenant.authn.ident._default | quote }}]
    audience = [
    {{- range $k, $v := (pluck $.Values.werf.env $tenant.authn.audience | first | default $tenant.authn.audience._default) }}
    {{- if $k }}, {{ end }}
    {{- $v | quote -}}
    {{- end -}}
    ]
    algorithm = {{ pluck $.Values.werf.env $tenant.authn.algorithm | first | default $tenant.authn.algorithm._default | quote }}
    key = {{ printf "/app/%s" (pluck $.Values.werf.env $tenant.authn.key | first | default $tenant.authn.key._default) }}
{{- end }}
{{- else if hasPrefix "testing" $.Values.werf.env }}
{{- if (pluck $.Values.werf.env $tenant.authn.ident | first) }}
    ##
    ## {{ $tenant.name }}
    ##
    [authn.{{ pluck $.Values.werf.env $tenant.authn.ident | first | default $tenant.authn.ident._default | quote }}]
    audience = [
    {{- range $k, $v := (pluck $.Values.werf.env $tenant.authn.audience | first | default $tenant.authn.audience._default) }}
    {{- if $k }}, {{ end }}
    {{- $v | quote -}}
    {{- end -}}
    ]
    algorithm = {{ pluck $.Values.werf.env $tenant.authn.algorithm | first | default $tenant.authn.algorithm._default | quote }}
    key = {{ printf "/app/%s" (pluck $.Values.werf.env $tenant.authn.key | first | default $tenant.authn.key._default) }}
{{- end }}
{{- end }}

{{- end }}

  vernemq.conf: |
    allow_anonymous = off
    allow_register_during_netsplit = off
    allow_publish_during_netsplit = off
    allow_subscribe_during_netsplit = off
    allow_unsubscribe_during_netsplit = off
    allow_multiple_sessions = off
    max_client_id_size = 150
    persistent_client_expiration = never
    retry_interval = 5
    max_inflight_messages = 0
    max_online_messages = -1
    max_offline_messages = -1
    max_message_size = 0
    upgrade_outgoing_qos = off
    metadata_plugin = vmq_plumtree
    leveldb.maximum_memory.percent = 70
    listener.tcp.buffer_sizes = 4096,16384,32768
    listener.tcp.my_publisher_listener.buffer_sizes=4096,16384,32768
    listener.tcp.my_subscriber_listener.buffer_sizes=4096,16384,32768
    listener.max_connections = 10000
    listener.nr_of_acceptors = 100
    listener.tcp.default = 0.0.0.0:1883
    listener.ssl.default = 0.0.0.0:8883
    listener.ws.default = 0.0.0.0:8080
    listener.wss.default = 0.0.0.0:8443
    listener.tcp.allowed_protocol_versions = 3,4,5
    listener.ssl.allowed_protocol_versions = 3,4,5
    listener.ws.allowed_protocol_versions = 3,4,5
    listener.wss.allowed_protocol_versions = 3,4,5
    listener.vmq.clustering = 0.0.0.0:44053
    listener.mountpoint = off
    listener.ssl.certfile = /tls/tls.crt
    listener.wss.certfile = /tls/tls.crt
    listener.ssl.keyfile = /tls/tls.key
    listener.wss.keyfile = /tls/tls.key
    systree_enabled = off
    systree_interval = 0
    shared_subscription_policy = prefer_local
    plugins.mqttgw = on
    plugins.mqttgw.path = /app/mqttgw
    plugins.vmq_passwd = off
    plugins.vmq_acl = off
    plugins.vmq_diversity = off
    plugins.vmq_webhooks = off
    plugins.vmq_bridge = off
    vmq_acl.acl_file = /etc/vernemq/vmq.acl
    vmq_acl.acl_reload_interval = 10
    vmq_passwd.password_file = /etc/vernemq/vmq.passwd
    vmq_passwd.password_reload_interval = 10
    vmq_diversity.script_dir = /usr/share/vernemq/lua
    vmq_diversity.auth_postgres.enabled = off
    vmq_diversity.auth_mysql.enabled = off
    vmq_diversity.auth_mongodb.enabled = off
    vmq_diversity.auth_redis.enabled = off
    log.console = console
    log.console.level = info
    log.syslog = off
    log.crash = on
    log.crash.file = /var/log/vernemq/crash.log
    log.crash.maximum_message_size = 64KB
    log.crash.size = 10MB
    log.crash.rotation = $D0
    log.crash.rotation.keep = 5
    nodename = VerneMQ@127.0.0.1
    erlang.async_threads = 64
    erlang.max_ports = 262144
    erlang.distribution_buffer_size = 32MB
